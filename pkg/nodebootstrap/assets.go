// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/bootstrap.al2.sh (232B)
// assets/bootstrap.linux.sh (1.24kB)
// assets/bootstrap.ubuntu.sh (207B)
// assets/efa.al2.sh (351B)
// assets/efa.managed.boothook (484B)
// assets/install-ssm.al2.sh (159B)

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\xae\xc2\x30\x0c\x05\xf7\x39\x45\x7e\xff\xba\xf5\x9e\xdb\x24\xa9\xa1\x56\xdd\x38\xb2\x1d\x54\x6e\x8f\x10\xb4\x82\xe5\x58\x9e\xd1\xfb\xff\x83\x4c\x15\x72\xb2\x25\x04\x43\x8f\xa3\x44\x54\xc5\x9d\xfc\xc0\x46\x0d\xaf\x89\xf8\xe0\x2a\xbd\x1a\x7a\x08\x58\x16\x89\x03\xae\x56\x9c\x2f\xd1\x3c\xa9\x53\xbd\xc5\x2c\xe2\xe6\x9a\xda\x10\xe0\x9e\x14\x98\x32\x14\x96\x3e\x83\x15\xa5\xe6\x06\x6f\x05\xce\xc7\x89\xa9\xf6\x7d\x7a\x4d\xf8\x6d\x2a\x9e\xd5\xb5\x67\x64\xf4\x11\x57\x1b\x82\x3d\xcc\x71\x2b\xce\x71\x4e\xb8\x49\x1d\x15\x59\xd2\xfc\x75\xff\x98\x87\x16\x9e\x01\x00\x00\xff\xff\x65\x71\xde\x52\xe8\x00\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa0, 0x6b, 0x29, 0x98, 0x9a, 0xc3, 0x2f, 0x30, 0x5a, 0x6, 0xc2, 0xf1, 0x9, 0x17, 0x6c, 0xa4, 0xd, 0x46, 0xa, 0x7e, 0x6f, 0x88, 0xae, 0x87, 0x8f, 0x8f, 0x8d, 0x9c, 0xc0, 0x2, 0x77, 0xba}}
	return a, nil
}

var _bootstrapLinuxSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x6d\x4f\xdb\x4c\x10\xfc\x7e\xbf\x62\x9f\x23\x52\xc8\x23\xce\x06\xd4\x22\x35\x52\x2a\x85\xc4\x50\x8b\x60\x10\x71\xa4\x54\x14\x45\x17\x67\x93\x1c\x38\x77\xee\xdd\x9a\x17\x45\xfe\xef\x95\xf3\x9e\x42\xf9\x64\xed\xed\xce\xec\xee\xec\xf8\xe0\x3f\x7f\xa8\xb4\x3f\x94\x6e\xca\x98\x43\x02\x61\x00\xad\xc5\x57\x45\xeb\x30\x53\x19\x8e\xa5\x4a\xd7\xb1\x36\xb9\x76\x48\x8c\x1d\x40\xcf\x21\x84\xd7\xed\xee\xf3\x29\x90\x81\x09\x12\xcc\x90\xe4\x48\x92\x64\xf1\xcd\x55\x10\x35\x78\xe5\x30\xc9\x6d\x0a\x42\x38\x95\xa2\x26\x10\x7d\xb8\xed\xc5\x20\x7e\x00\xef\x0b\xf9\xe2\x04\x26\xa7\x62\x0d\x12\x64\x9e\x50\x0b\xa2\x54\x38\x4c\x8c\x1e\xb9\x3a\x9c\x1d\x1f\x73\x98\x12\x65\x75\xdf\x3f\x39\xfb\xe6\x9d\x7e\xfd\xe2\xad\xbe\x7e\x2a\x09\x1d\xf9\x32\x53\xfe\x02\x59\xe3\x6c\x9c\xeb\x84\x94\xd1\xe5\x30\x83\x35\xef\x61\x0d\xe6\x0c\xe0\xaf\x49\x3e\x19\xa1\x0e\x95\xc5\xfc\x1c\xf8\xe7\xad\x4b\x98\x28\x71\x7e\xe5\x84\xb3\x82\x31\x67\x72\x9b\x20\xf8\x48\x89\x8f\x4f\x2e\xa1\xd4\x7f\xca\x87\x98\x22\x79\xa8\x9f\xe1\x00\xc6\x2a\x45\x78\xb1\x8a\x08\x35\x0c\xdf\x60\x68\x0c\x39\xb2\x32\xcb\xd0\x32\x76\xd5\x3b\x0f\x3a\x41\x3c\x68\xdd\x44\x17\xe1\x65\xa3\xba\xe0\x29\x09\xac\x46\x42\xb7\xe6\x5a\x7f\x45\x62\xf4\x58\x4d\xbc\x47\x67\x74\x75\x03\x0e\xfa\xf1\x5d\x73\xd0\xbc\xbb\xec\xae\x08\xf6\x07\x11\xf8\x4a\x56\xae\x30\x61\xd4\x8d\x9b\x51\x2b\x18\x84\xed\xf2\x58\xbb\xaa\x81\xd2\x8e\xa4\x4e\x50\xa8\x51\x8d\x6f\x2b\x3b\xe1\x45\xd0\xfa\xd9\xea\x04\xff\x06\xa4\x6a\x8c\x22\x79\x4b\x52\xac\x71\xd6\xea\xf4\xba\x71\x70\x37\x68\x47\xdd\x06\xaf\xcc\x77\xc2\xba\x28\x38\x8b\x6e\xda\xc1\x20\x6e\x86\x51\xbc\x48\xef\x84\xdb\x74\xa7\x79\x1e\x74\xb6\xe9\x65\x58\x1c\x69\x33\x5a\xf6\x5a\xb4\x6a\x54\xe6\xef\x67\x2c\x8e\x64\x9a\x4d\xa5\xb7\x94\xc0\x53\xc6\xdf\xd9\x6a\x17\x11\xb6\x0b\xce\x18\x26\x53\x03\x7c\x59\x5c\x07\x9b\x6b\xad\xf4\x64\x73\x4d\x7f\x73\x2c\xce\xde\xbf\x79\x6e\x0a\x3b\xfb\x45\xcd\xeb\xa0\xe0\xf0\x8b\x01\x08\x31\xd2\x4e\x24\x69\xee\x08\xad\x50\x19\xec\xcb\xb0\xa9\xda\x3b\x90\x90\x76\xe2\x80\x0b\x61\x71\xa2\x16\xc0\x17\x45\x53\x41\x52\x69\x72\x8d\x3d\xa1\x0a\x10\x62\xa9\x85\x1c\x62\xba\x49\xae\x64\x7a\xb7\xd6\x0c\xed\xa4\x5c\x2b\x77\x68\xc1\x64\xe5\xef\xe2\x40\x69\x32\xf0\x81\xad\x38\x8b\xaf\x6f\x17\x7e\x6c\x54\x7d\x9a\x65\x7b\xd6\x5b\x99\xa8\xdc\x1e\xaa\x76\x06\x62\x0c\x95\xf9\xba\xbe\xa8\x42\xd0\x0f\x63\xf6\xf8\x1b\x84\x83\xaa\x77\x7f\xfc\x00\xff\x83\x77\x7f\xf2\x50\x2d\x05\xd8\xb7\x7a\xc1\x77\xdf\xb6\x0e\x2e\x38\x7c\x2f\x33\x1b\x52\xce\x66\xcf\xfb\x0f\x1f\x91\xb1\x3f\x01\x00\x00\xff\xff\xc0\xf8\x81\x5f\xd8\x04\x00\x00")

func bootstrapLinuxShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapLinuxSh,
		"bootstrap.linux.sh",
	)
}

func bootstrapLinuxSh() (*asset, error) {
	bytes, err := bootstrapLinuxShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.linux.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xda, 0x4c, 0xa1, 0xa3, 0x36, 0x67, 0x57, 0x35, 0x87, 0x50, 0x94, 0x20, 0x5f, 0x7d, 0x46, 0xa5, 0x91, 0x13, 0xde, 0xbb, 0xd1, 0x2, 0xcb, 0xa5, 0xd9, 0xa5, 0x5f, 0x95, 0xb1, 0x90, 0xe0, 0xe3}}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\x0e\xc2\x30\x08\x86\xef\x3c\x45\x9d\xe7\x8d\xbb\x6f\xd3\x56\x74\x64\x0d\x34\x40\xcd\x1e\xdf\x18\xb3\x45\x8f\x5f\x3e\xf8\xf2\x5f\x2f\x58\x58\xb0\x64\x5f\x01\x9c\x22\xcd\x9a\xc8\x8c\x76\x8e\x03\x3b\x77\x7a\x64\x6e\x07\x8b\x0e\x71\x0a\x00\xaa\xab\xa6\x89\x36\xaf\xd1\x6e\xc9\x23\x5b\xb0\x3c\x53\x51\x0d\x0f\xcb\x7d\x02\x7c\x65\xc3\xc6\x05\x6b\xd3\x71\x47\xaf\xc6\x3d\x1c\xbf\x2f\x78\x1e\x2e\x8d\x65\xec\xcb\x67\xc2\x7f\xd3\xe8\xac\x6e\xa3\x50\xa3\x98\x69\xf3\x09\x5c\x72\x3f\xe4\xaf\x81\x77\x00\x00\x00\xff\xff\xae\xfb\x3d\xe5\xcf\x00\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9e, 0x2, 0x80, 0x68, 0x6f, 0xa0, 0x90, 0xd0, 0x55, 0x83, 0xe0, 0x72, 0x7c, 0xa7, 0x81, 0xbe, 0xac, 0x86, 0xe5, 0x57, 0xd3, 0xad, 0xb4, 0x85, 0x78, 0xb3, 0xfa, 0xed, 0x50, 0xa9, 0xd6, 0x3b}}
	return a, nil
}

var _efaAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\x4d\x6a\xc3\x40\x0c\x05\xe0\xbd\x4e\xa1\xd2\xb5\x46\x25\xdd\x15\xba\xea\x01\x7a\x84\xa0\xa4\x1a\x7b\xc0\xf3\xd3\x91\x8c\x93\x9c\xbe\x38\x4d\xe8\xc2\x34\x9b\x81\x37\x7c\x12\x3c\x3d\x3f\xf1\x21\x15\x3e\x88\x8d\x00\xa6\x8e\x54\x51\x7b\xd7\x53\xf2\x7b\x6c\xa9\x69\x94\x34\xdd\x73\xa9\x73\x31\x75\x80\xf3\x9c\x31\x15\x73\x99\x26\xa4\x33\x2e\x83\x3a\xac\x0f\xd2\x37\x12\x79\xca\x5a\x67\x7f\xdf\xbd\xe0\xe8\xde\xec\x8d\xd9\x5e\x69\x36\x5a\xd4\x9c\x76\x41\xb2\x5c\x6a\x91\xc5\xc2\xb1\x66\x96\xc5\x48\xa3\xd0\x6d\x9f\xf6\xed\x0f\x4d\xe2\x6a\x1e\x5c\x7a\x18\x2e\x48\x9f\xc8\x9e\xdb\xd6\xdd\x00\xb8\x74\xa4\x53\x7c\xac\x90\x3e\xae\x00\x8e\x5f\xff\x40\x08\xac\x51\xf6\x7f\x83\x36\xae\x6d\x69\x00\xae\xcd\xf9\xb7\xc6\x4a\xae\x87\x8c\x69\x9f\x4a\xac\x48\x0d\x35\x0a\xfc\x04\x00\x00\xff\xff\x8f\x52\xee\x9a\x5f\x01\x00\x00")

func efaAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_efaAl2Sh,
		"efa.al2.sh",
	)
}

func efaAl2Sh() (*asset, error) {
	bytes, err := efaAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "efa.al2.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0xd9, 0x1d, 0x49, 0x21, 0x82, 0x43, 0xb0, 0xeb, 0x4d, 0xa2, 0x59, 0x42, 0xc6, 0xba, 0xc9, 0xb5, 0x60, 0xcd, 0x1d, 0x96, 0x18, 0x48, 0x80, 0x1b, 0x66, 0xda, 0x3e, 0x7, 0x93, 0xdb, 0x9e}}
	return a, nil
}

var _efaManagedBoothook = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x4d\x4e\xc4\x30\x0c\x85\xf7\x39\x85\x2f\xe0\x04\x0d\x3b\x24\x56\x1c\x80\x23\x54\xa6\xe3\xb4\x91\x9a\x1f\x62\x47\x65\xe6\xf4\x28\xed\x88\x0d\xad\x60\x67\xf9\x3d\x7f\xcf\x7a\xe3\x92\xdb\x15\x43\x0a\x8a\x85\x2b\xe4\x34\x32\xdc\x5a\x1c\xd6\x89\xb5\x0f\x10\x92\x28\x2d\x0b\xe0\x0d\xfa\xce\x1c\x1d\x74\x61\x60\x4f\xdb\x00\xf8\x09\x88\x1a\x22\xe7\xa6\xaf\x97\x27\x98\x55\x8b\xbc\x38\x27\xcf\xd8\x04\x57\x16\xc5\x8b\xa5\x48\xf7\x9c\x68\x15\x3b\xe6\xe8\x68\x15\x64\x4f\xf8\x08\xe3\xfa\x7b\x83\x0b\x29\x8b\x5a\xa5\x6a\xa7\x3b\xe0\x3b\x38\x8d\xe5\x2f\x9f\x39\xfc\x57\xa9\x6e\xef\x2a\x55\xc0\x2f\xff\x2f\x12\xe0\xdb\xe6\x33\xa5\xc9\x7c\x3d\x39\x39\x4c\x7b\xa8\x5b\xa2\x75\xec\x69\xf8\xf1\x5b\x99\x7b\xb1\x38\x99\x92\xcb\x19\xf3\x10\xba\x63\x7c\x06\x97\x8b\xba\xbd\xcd\xce\x76\x1f\x21\x39\x1f\x76\x0d\x4b\xf7\x99\xef\x00\x00\x00\xff\xff\xd7\xd4\x31\xc2\xe4\x01\x00\x00")

func efaManagedBoothookBytes() ([]byte, error) {
	return bindataRead(
		_efaManagedBoothook,
		"efa.managed.boothook",
	)
}

func efaManagedBoothook() (*asset, error) {
	bytes, err := efaManagedBoothookBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "efa.managed.boothook", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x40, 0xf1, 0xae, 0x67, 0xa7, 0xe, 0xc, 0x31, 0x61, 0x86, 0x41, 0x8b, 0xd1, 0x55, 0x3f, 0x84, 0xbd, 0x4c, 0xdd, 0x84, 0xc9, 0xee, 0x9d, 0x36, 0xda, 0x8f, 0x6c, 0xbc, 0x6a, 0xaf, 0xed}}
	return a, nil
}

var _installSsmAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xca\x41\x0a\x02\x31\x0c\x05\xd0\x7d\x4f\x11\x71\x5d\xe6\x4c\xa9\x44\x0d\xa4\xe9\xd0\xff\x07\xac\xa7\x77\x35\x2b\x61\x96\x0f\xde\xfd\xb6\x35\xcf\xad\x29\xde\xa5\xc0\x28\x75\x88\xcd\x69\x1f\xe7\xc9\xdd\x77\x7b\xaa\xc7\xe9\x1c\x47\xc2\x58\xca\x3a\xba\x78\x82\x1a\x21\x75\x89\x76\xfd\x8e\xac\x40\xaf\xfa\xb2\x64\xc1\x02\xad\x3f\x18\x62\xa9\x2d\xec\x6a\x80\x3a\xf9\x1f\x7e\x01\x00\x00\xff\xff\x93\x2c\xf6\x43\x9f\x00\x00\x00")

func installSsmAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_installSsmAl2Sh,
		"install-ssm.al2.sh",
	)
}

func installSsmAl2Sh() (*asset, error) {
	bytes, err := installSsmAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install-ssm.al2.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0xf9, 0xf8, 0x5e, 0xb9, 0xcf, 0xfb, 0x94, 0xb4, 0x85, 0xa3, 0x62, 0xf0, 0x3b, 0x88, 0x44, 0xe3, 0x84, 0xfa, 0x85, 0x39, 0xdb, 0xed, 0xa2, 0x6a, 0x1, 0x7b, 0xe5, 0x49, 0x21, 0xef, 0x3d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap.al2.sh":     bootstrapAl2Sh,
	"bootstrap.linux.sh":   bootstrapLinuxSh,
	"bootstrap.ubuntu.sh":  bootstrapUbuntuSh,
	"efa.al2.sh":           efaAl2Sh,
	"efa.managed.boothook": efaManagedBoothook,
	"install-ssm.al2.sh":   installSsmAl2Sh,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap.al2.sh": {bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.linux.sh": {bootstrapLinuxSh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": {bootstrapUbuntuSh, map[string]*bintree{}},
	"efa.al2.sh": {efaAl2Sh, map[string]*bintree{}},
	"efa.managed.boothook": {efaManagedBoothook, map[string]*bintree{}},
	"install-ssm.al2.sh": {installSsmAl2Sh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
