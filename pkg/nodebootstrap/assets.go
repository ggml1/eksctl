// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/bootstrap.al2.sh (958B)
// assets/bootstrap.helper.sh (984B)
// assets/bootstrap.ubuntu.sh (752B)
// assets/efa.al2.sh (351B)
// assets/efa.managed.boothook (484B)
// assets/install-ssm.al2.sh (159B)

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xef\x6b\x1a\x31\x18\xc7\xdf\xe7\xaf\x78\x96\x09\xc2\x20\x77\xdb\xdb\xc1\x06\x56\x6f\x45\x6a\x75\xe8\x15\x0a\x5d\x91\xdc\xdd\xa3\xa6\xc6\xe4\x96\xe7\xb9\xae\x43\xfc\xdf\xc7\xb5\x7a\x3b\xad\x85\xbe\xcc\xf7\x57\xf2\x81\x7c\xfc\x10\x67\xc6\xc5\x99\xa6\x95\x10\x84\x0c\xca\x03\x86\x80\x4f\x86\x0f\xc7\xd2\x94\xb8\xd0\xc6\x1e\xce\xce\x57\x8e\x90\x85\x20\x5f\x85\x1c\x21\x7e\xd4\x21\xb6\x26\x8b\x73\xeb\xab\x22\xa6\x3c\x98\x92\x29\xc6\x35\xe5\x6c\xe3\xcc\x7b\x26\x0e\xba\x8c\x56\x68\x4b\x0c\x51\x7d\x11\xe6\x2b\x0f\xf2\x25\xf1\x15\x42\xe5\x9c\x71\x4b\x88\x91\xf3\xba\xf6\xbf\x23\xc5\x6b\x2d\xa2\x15\xc8\xce\xb6\x3f\xba\x99\xa5\xc9\x74\x3e\xee\x5d\x27\x3b\x09\xbf\x04\x80\x52\x85\x23\x95\xdb\x8a\x18\x83\x32\x65\x3b\x36\x18\xcf\x9a\xd4\xba\xca\xd0\x22\x2b\x7c\xe2\xa0\x95\x0e\x4b\x02\xa9\x54\xc0\xa5\x79\x2e\xfe\x31\xbc\x52\xac\x8d\x63\xfa\xd6\xd9\x8e\x27\x83\x64\x9e\xf6\x86\xe3\x74\xb6\x03\xa5\x9c\x2f\x50\x59\x9d\xa1\x6d\xcc\x51\xef\x22\x19\xcd\x76\xf2\x14\x6b\x83\x61\x59\x63\x55\x84\x01\x7c\xc9\xc6\x3b\x02\xe3\xd8\xc3\xe1\x01\xb9\x77\x0b\xb3\x8c\x1e\xc8\x3b\x29\x6a\x36\xe8\x86\x0d\xa8\x05\x74\xb6\xe9\xf5\xcf\xf9\xd5\xcd\x45\x32\xef\x4f\xc6\x3f\x76\x5d\x48\x6e\x87\xa9\x78\xf8\x0d\x8a\xa0\x1b\xdd\x7d\xbe\x87\x4f\x10\xdd\x7d\xb9\xef\xd6\x8c\x75\x6e\x94\xa4\xcf\xd1\xe1\xe5\x4e\xb6\xb5\xe4\x36\x9d\xf6\xe6\xbd\xe9\x65\x8d\xff\xbd\x76\x8e\x97\xa5\xd8\x3c\x9e\x51\xcf\xcd\xbe\x9f\xaf\xf0\xf9\x1a\x03\x14\x1a\x37\xde\xbd\x89\x37\x98\xf4\xaf\x92\xe9\x7b\x00\x5b\xc9\x03\xdf\x5e\x7a\xc1\x6b\x8c\x06\xb0\xbd\xdd\x46\x3c\xd2\xcf\x4c\x0b\x41\x7f\x89\x71\x93\xb3\xdd\x3f\x5f\x05\xb4\x5e\x17\xa7\x5f\x16\x89\x75\xe0\x1a\xff\x08\x56\xb6\xfa\xfb\xcc\x3e\xf0\xf6\x40\xf3\x1d\xd7\x74\xae\xbe\xb7\x4f\xfa\x85\x77\x28\xc5\xbf\x00\x00\x00\xff\xff\x3a\x76\x4f\x3b\xbe\x03\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0xdb, 0xc3, 0xee, 0xfa, 0xda, 0x2c, 0x6f, 0x4d, 0x8d, 0x1, 0xa1, 0x1a, 0xf0, 0x56, 0x7, 0xbd, 0xd, 0xfd, 0xd8, 0xd6, 0x5a, 0x6c, 0x40, 0xe0, 0xdc, 0x3c, 0xae, 0xf9, 0x1b, 0xe5, 0x28}}
	return a, nil
}

var _bootstrapHelperSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x5f\x6b\x22\x31\x14\xc5\xdf\xf3\x29\xee\xa6\x42\x2b\x34\xa6\x2d\xbb\x85\x15\x7c\xb0\x9a\x76\x87\xda\xb1\xe8\x08\xdd\xa7\x21\xc6\x6b\x9b\x75\x9a\x0c\x93\x6b\xff\x50\xfc\xee\xcb\xa8\xb3\xce\xec\xb2\x7d\x0a\x87\x7b\xce\xb9\xbf\xc0\x3d\xfa\x22\xe7\xd6\xc9\xb9\x0e\x4f\x8c\x05\x24\x10\x1e\xb0\x28\xf0\xcd\x52\x25\x73\x9b\xe3\x52\xdb\xac\xd2\xce\xaf\x5d\x40\x62\x2c\xf8\x75\x61\x10\x24\x92\x91\xb8\x0a\x86\x32\xb9\x5a\xcf\x31\x43\xea\xa0\x7b\x81\x23\x58\xda\x0c\xe1\xb5\xb0\x44\xe8\x60\xfe\x0e\x73\xef\x29\x50\xa1\xf3\x1c\x0b\xc6\x8e\x60\x16\x10\xa2\xbb\xe1\xf4\xe5\x02\xc8\xc3\x23\x12\x3c\x23\xe9\x85\x26\xcd\x92\xf1\xad\x8a\x7b\xbc\x75\x62\xd6\x45\x06\x42\x04\x9b\xa1\x23\x10\x0f\x70\x3f\x4b\x40\xfc\x00\xfe\x20\xf4\x6b\x10\x68\x2e\x44\x15\x12\xe4\x57\xe8\x04\x51\x26\x02\x1a\xef\x16\xa1\x0b\x97\x67\x67\x1c\x9e\x88\xf2\xae\x94\xe7\x97\xdf\x3b\x17\xdf\xbe\x76\xf6\xaf\xcc\x34\x61\x20\xa9\x73\x2b\xb7\xc9\x36\x67\xcb\xb5\x33\x64\xbd\x2b\x61\xd2\xaa\xf7\xa4\x0d\x1f\x0c\xe0\x2f\x92\x4f\x10\xba\xd0\xda\xf2\x73\xe0\x9f\xaf\x2e\x63\xa2\xcc\xc9\xd6\x39\x67\x1b\xc6\xa2\x78\x9a\xf4\xe3\x81\x4a\xa3\x61\xf9\xf9\x3a\x05\x58\x17\x48\x3b\x83\xc2\x2e\xda\xfc\xe0\x1c\x45\xd7\x6a\xf0\x73\x30\x52\xff\x0f\x64\x76\x89\xc2\xbc\x9b\x0c\xdb\x9c\x0d\x46\xb3\x69\xa2\x26\xe9\x30\x9e\xf6\x78\xeb\xa3\x26\xbb\x62\xc3\x59\x3c\x1e\xaa\x34\xe9\x47\x71\xb2\x1d\xd7\xe4\x61\x3c\xea\x5f\xa9\xd1\x61\xbc\x93\x9b\x53\xe7\x17\xbb\x5d\xdb\x55\xbd\xd6\xc7\xbf\x8c\x9b\x53\x9d\xe5\x4f\xba\xb3\x3b\x97\x8e\xf5\xb2\xf6\xab\x7a\x22\x1a\x6e\x0e\xa8\x71\xff\x4e\xd5\x59\x4b\xbd\xe1\xec\x76\x76\xa5\x46\x2a\x49\x07\xe3\xf8\x3a\xba\xe9\x1d\x6f\x0f\xb1\xbc\xc0\xc2\x21\x61\xa8\x8e\xb1\x7a\x85\xf1\x6e\x69\x1f\x3b\xbf\x82\x77\xc7\x7f\xc2\xea\x21\x99\xf4\xd3\xfe\xe4\x66\xba\x2f\x68\x5e\xb2\xc0\x37\x2a\xf4\x3e\x33\x1c\x0f\x6e\xd5\xa4\xb9\x6f\xe1\xcd\x0a\x0b\xb9\xd0\xf8\xec\x5d\xd3\xb7\xab\x6e\xb8\xf7\xe5\xbb\x50\xa3\x3b\xb9\xbb\x4f\x4b\xa6\xad\xbf\x77\x2c\xe9\x39\x6f\x80\xd7\x6c\x35\x8c\xbd\x71\xdf\x57\xf3\xfd\x0e\x00\x00\xff\xff\xd3\x66\x76\xc3\xd8\x03\x00\x00")

func bootstrapHelperShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapHelperSh,
		"bootstrap.helper.sh",
	)
}

func bootstrapHelperSh() (*asset, error) {
	bytes, err := bootstrapHelperShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.helper.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x80, 0x6a, 0x7d, 0x18, 0xa5, 0xc4, 0xa7, 0x55, 0x43, 0x18, 0xd, 0x59, 0xbe, 0x0, 0xe0, 0xa9, 0x19, 0xc5, 0xfa, 0x39, 0x41, 0x43, 0x46, 0x9f, 0xb4, 0xa0, 0xc3, 0x84, 0xa, 0xac, 0xae, 0x24}}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xd1\x6e\x1a\x3d\x10\x85\xef\xfd\x14\xf3\xfb\x47\xda\xb6\x92\x71\x7b\x5b\xa9\x95\x08\x6c\x23\x14\x02\x15\x6c\xa4\x48\x69\x84\xbc\xde\x61\x71\x58\xec\xad\x67\x36\x4d\x85\x78\xf7\xca\x41\x20\x9a\x72\xe9\x39\xf3\x9d\xd9\x73\xf6\xff\xff\x74\xe9\xbc\x2e\x0d\xad\x85\x20\x64\x50\x01\x30\x46\x7c\x71\x7c\x7c\xb6\xae\xc5\x95\x71\xcd\xf1\xed\x43\xe7\x09\x59\x08\x0a\x5d\xb4\x08\xfa\xd9\x44\xdd\xb8\x52\xdb\x26\x74\x95\x26\x1b\x5d\xcb\xa4\x71\x43\x96\x1b\x5d\x86\xc0\xc4\xd1\xb4\xfd\x35\x36\x2d\xc6\xfe\xe1\x50\x05\xca\x41\x46\xda\xd6\x31\x74\xed\x8a\x34\xfd\x26\xc6\x6d\xa5\xeb\x0c\x34\xb2\x4d\xf8\x19\x9b\x20\xb4\xeb\x00\xf2\x60\xfb\x19\x62\xe7\xbd\xf3\xf5\x85\x65\x29\x2e\x1a\x80\xec\xed\x86\x93\xbb\x45\x91\xcf\x97\xd3\xc1\x6d\xbe\x97\xf0\x43\x00\x28\x55\x05\xbb\xc1\xa8\x6c\xf0\x2b\x57\xab\x27\x0a\x1e\x64\xef\x9d\x35\x9c\x88\xd1\x6c\x78\x93\xcf\x97\xf9\x7d\x31\x1f\x2c\x87\xb3\xe9\xb7\xf1\xf5\x5e\xbe\x3f\xa1\x9e\x94\x6d\x3a\x62\x8c\xca\xb5\xe7\x17\x46\xd3\xc5\xe9\xc0\xa6\x2b\xb1\x41\x56\xf8\xc2\xd1\x28\x13\x6b\x02\xa9\x54\xc4\xda\xbd\x82\xbf\x1c\xaf\x15\x1b\xe7\x99\xbe\xf4\x76\xd3\xd9\x28\x5f\x16\x83\xf1\xb4\x58\xec\x41\x29\x1f\x2a\x54\x8d\x29\xb1\x39\x89\x93\xc1\x55\x3e\x59\xec\xe5\xdb\x46\xb6\x18\xeb\xd4\x48\x47\x18\x21\xb4\xec\x82\x27\x70\x9e\x03\x1c\x3f\xe0\x10\xb1\x9f\x22\x4a\x91\x6a\x81\x2c\x6e\x41\xad\xa0\xb7\x2b\x6e\xbf\x2f\x6f\xee\xae\xf2\xd7\x8c\xfb\x0c\xf2\xfb\x71\x21\x9e\x7e\x82\x22\xc8\xfa\x0f\x1f\x1f\xe1\x03\xf4\x1f\x3e\x3d\x66\x29\x63\xda\x9b\xe4\xc5\xa9\x8e\xf3\xd9\xa1\xa8\xc1\xfc\x3a\xc5\xff\x9a\x94\xbf\x9d\xa5\xd8\x3e\x5f\x98\x5e\xb2\xfd\xe7\x8f\x23\xb1\x89\x9c\x22\x9e\x1a\xdd\x90\x14\xe4\x4d\x7b\x14\xcf\x95\x37\x78\x15\x3c\x4a\xf1\x27\x00\x00\xff\xff\xf6\xbf\x0c\x24\xf0\x02\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0x5a, 0xc8, 0xe2, 0x38, 0x8c, 0x28, 0x7, 0xfd, 0x5b, 0x5, 0x9e, 0x67, 0x1d, 0x5f, 0x92, 0x14, 0x6b, 0x74, 0x5d, 0xf2, 0x35, 0x5e, 0x37, 0xb4, 0x67, 0xb, 0x54, 0x3a, 0x95, 0xe2, 0x6a}}
	return a, nil
}

var _efaAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\x4d\x6a\xc3\x40\x0c\x05\xe0\xbd\x4e\xa1\xd2\xb5\x46\x25\xdd\x15\xba\xea\x01\x7a\x84\xa0\xa4\x1a\x7b\xc0\xf3\xd3\x91\x8c\x93\x9c\xbe\x38\x4d\xe8\xc2\x34\x9b\x81\x37\x7c\x12\x3c\x3d\x3f\xf1\x21\x15\x3e\x88\x8d\x00\xa6\x8e\x54\x51\x7b\xd7\x53\xf2\x7b\x6c\xa9\x69\x94\x34\xdd\x73\xa9\x73\x31\x75\x80\xf3\x9c\x31\x15\x73\x99\x26\xa4\x33\x2e\x83\x3a\xac\x0f\xd2\x37\x12\x79\xca\x5a\x67\x7f\xdf\xbd\xe0\xe8\xde\xec\x8d\xd9\x5e\x69\x36\x5a\xd4\x9c\x76\x41\xb2\x5c\x6a\x91\xc5\xc2\xb1\x66\x96\xc5\x48\xa3\xd0\x6d\x9f\xf6\xed\x0f\x4d\xe2\x6a\x1e\x5c\x7a\x18\x2e\x48\x9f\xc8\x9e\xdb\xd6\xdd\x00\xb8\x74\xa4\x53\x7c\xac\x90\x3e\xae\x00\x8e\x5f\xff\x40\x08\xac\x51\xf6\x7f\x83\x36\xae\x6d\x69\x00\xae\xcd\xf9\xb7\xc6\x4a\xae\x87\x8c\x69\x9f\x4a\xac\x48\x0d\x35\x0a\xfc\x04\x00\x00\xff\xff\x8f\x52\xee\x9a\x5f\x01\x00\x00")

func efaAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_efaAl2Sh,
		"efa.al2.sh",
	)
}

func efaAl2Sh() (*asset, error) {
	bytes, err := efaAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "efa.al2.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0xd9, 0x1d, 0x49, 0x21, 0x82, 0x43, 0xb0, 0xeb, 0x4d, 0xa2, 0x59, 0x42, 0xc6, 0xba, 0xc9, 0xb5, 0x60, 0xcd, 0x1d, 0x96, 0x18, 0x48, 0x80, 0x1b, 0x66, 0xda, 0x3e, 0x7, 0x93, 0xdb, 0x9e}}
	return a, nil
}

var _efaManagedBoothook = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x4d\x4e\xc4\x30\x0c\x85\xf7\x39\x85\x2f\xe0\x04\x0d\x3b\x24\x56\x1c\x80\x23\x54\xa6\xe3\xb4\x91\x9a\x1f\x62\x47\x65\xe6\xf4\x28\xed\x88\x0d\xad\x60\x67\xf9\x3d\x7f\xcf\x7a\xe3\x92\xdb\x15\x43\x0a\x8a\x85\x2b\xe4\x34\x32\xdc\x5a\x1c\xd6\x89\xb5\x0f\x10\x92\x28\x2d\x0b\xe0\x0d\xfa\xce\x1c\x1d\x74\x61\x60\x4f\xdb\x00\xf8\x09\x88\x1a\x22\xe7\xa6\xaf\x97\x27\x98\x55\x8b\xbc\x38\x27\xcf\xd8\x04\x57\x16\xc5\x8b\xa5\x48\xf7\x9c\x68\x15\x3b\xe6\xe8\x68\x15\x64\x4f\xf8\x08\xe3\xfa\x7b\x83\x0b\x29\x8b\x5a\xa5\x6a\xa7\x3b\xe0\x3b\x38\x8d\xe5\x2f\x9f\x39\xfc\x57\xa9\x6e\xef\x2a\x55\xc0\x2f\xff\x2f\x12\xe0\xdb\xe6\x33\xa5\xc9\x7c\x3d\x39\x39\x4c\x7b\xa8\x5b\xa2\x75\xec\x69\xf8\xf1\x5b\x99\x7b\xb1\x38\x99\x92\xcb\x19\xf3\x10\xba\x63\x7c\x06\x97\x8b\xba\xbd\xcd\xce\x76\x1f\x21\x39\x1f\x76\x0d\x4b\xf7\x99\xef\x00\x00\x00\xff\xff\xd7\xd4\x31\xc2\xe4\x01\x00\x00")

func efaManagedBoothookBytes() ([]byte, error) {
	return bindataRead(
		_efaManagedBoothook,
		"efa.managed.boothook",
	)
}

func efaManagedBoothook() (*asset, error) {
	bytes, err := efaManagedBoothookBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "efa.managed.boothook", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x40, 0xf1, 0xae, 0x67, 0xa7, 0xe, 0xc, 0x31, 0x61, 0x86, 0x41, 0x8b, 0xd1, 0x55, 0x3f, 0x84, 0xbd, 0x4c, 0xdd, 0x84, 0xc9, 0xee, 0x9d, 0x36, 0xda, 0x8f, 0x6c, 0xbc, 0x6a, 0xaf, 0xed}}
	return a, nil
}

var _installSsmAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xca\x41\x0a\x02\x31\x0c\x05\xd0\x7d\x4f\x11\x71\x5d\xe6\x4c\xa9\x44\x0d\xa4\xe9\xd0\xff\x07\xac\xa7\x77\x35\x2b\x61\x96\x0f\xde\xfd\xb6\x35\xcf\xad\x29\xde\xa5\xc0\x28\x75\x88\xcd\x69\x1f\xe7\xc9\xdd\x77\x7b\xaa\xc7\xe9\x1c\x47\xc2\x58\xca\x3a\xba\x78\x82\x1a\x21\x75\x89\x76\xfd\x8e\xac\x40\xaf\xfa\xb2\x64\xc1\x02\xad\x3f\x18\x62\xa9\x2d\xec\x6a\x80\x3a\xf9\x1f\x7e\x01\x00\x00\xff\xff\x93\x2c\xf6\x43\x9f\x00\x00\x00")

func installSsmAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_installSsmAl2Sh,
		"install-ssm.al2.sh",
	)
}

func installSsmAl2Sh() (*asset, error) {
	bytes, err := installSsmAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install-ssm.al2.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0xf9, 0xf8, 0x5e, 0xb9, 0xcf, 0xfb, 0x94, 0xb4, 0x85, 0xa3, 0x62, 0xf0, 0x3b, 0x88, 0x44, 0xe3, 0x84, 0xfa, 0x85, 0x39, 0xdb, 0xed, 0xa2, 0x6a, 0x1, 0x7b, 0xe5, 0x49, 0x21, 0xef, 0x3d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap.al2.sh":     bootstrapAl2Sh,
	"bootstrap.helper.sh":  bootstrapHelperSh,
	"bootstrap.ubuntu.sh":  bootstrapUbuntuSh,
	"efa.al2.sh":           efaAl2Sh,
	"efa.managed.boothook": efaManagedBoothook,
	"install-ssm.al2.sh":   installSsmAl2Sh,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap.al2.sh": {bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.helper.sh": {bootstrapHelperSh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": {bootstrapUbuntuSh, map[string]*bintree{}},
	"efa.al2.sh": {efaAl2Sh, map[string]*bintree{}},
	"efa.managed.boothook": {efaManagedBoothook, map[string]*bintree{}},
	"install-ssm.al2.sh": {installSsmAl2Sh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
